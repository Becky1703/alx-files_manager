import mongodb from 'mongodb';
import envLoader from './env_loader';

class DBClient {
  constructor() {
    envLoader();
    const host = process.env.DB_HOST || 'localhost';
    const port = process.env.DB_PORT || 27017;
    const database = process.env.DB_DATABASE || 'files_manager';
    const dbURL = `mongodb://${host}:${port}/${database}`;

    this.client = new mongodb.MongoClient(dbURL, { useUnifiedTopology: true });
    this.connect();
  }

  async connect() {
    try {
      await this.client.connect();
      console.log('Connected to MongoDB');
    } catch (error) {
      console.error('MongoDB connection error:', error.message);
    }
  }

  async close() {
    await this.client.close();
    console.log('MongoDB connection closed');
  }

  // function to check if connection to Mongodb is successful  
  isAlive() {
    return this.client.isConnected();
  }

  // asynchronous function that counts number of documents in a users database
  async nbUsers() {
    return this.client.isConnected() ? this.client.db().collection('users').countDocuments() : 0;
  }

  // asynchronous function that counts number of documents in the files database
  async nbFiles() {
    return this.client.isConnected() ? this.client.db().collection('files').countDocuments() : 0;
  }

  // function returns number of documents
  async usersCollection() {
    return this.client.isConnected() ? this.client.db().collection('users') : null;
  }

 // function returns number of documents
  async filesCollection() {
    return this.client.isConnected() ? this.client.db().collection('files') : null;
  }
}

export const dbClient = new DBClient();

process.on('SIGINT', async () => {
  await dbClient.close();
  process.exit(0);
});

export default dbClient;
